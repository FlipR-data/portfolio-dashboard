---
title: "Portfolio Report"
format: 
  dashboard:
    logo: "images/logo.jpg"
    orientation: columns
params:
  alpha: !expr  c("GOOG","AAPL","AMZN","NVDA","VUSA.AS","JNJ","NKE","SGBS.MI","IBM" )
  weight: !expr  c(3,0.05,2,2,2,1.29,2,0.44,1)
---

```{r, loadpackages}
#| echo: false
#| include: false
library(pacman)
##remotes::install_github("timelyportfolio/dataui")
p_load(tidyverse, reactable,reactablefmtr,dataui,htmltools,
       htmlwidgets,lubridate,glue,bizdays,quantmod,plotrix,
       bslib,shiny,bsicons,plotly,PerformanceAnalytics)

```


```{css, echo=FALSE}
.stock-list {
  list-style-type: none;
  padding: 0;
  display: grid;
  grid-template-columns: repeat(2, 1fr); /* Two columns */
  gap: 20px; /* Space between items */
}

.stock-item {
  background-color: #f9f9f9; /* Light background */
  border: 1px solid #ddd; /* Border */
  border-radius: 5px; /* Rounded corners */
  padding: 15px; /* Padding inside items */
  transition: transform 0.2s; /* Smooth hover effect */
}

.stock-item:hover {
  transform: scale(1.02); /* Scale effect on hover */
}

.stock-header {
  font-weight: bold;
  margin-bottom: 10px;
}

.stock-value {
  color: #007bff; /* Blue for values */
}

.stock-details {
  margin-top: 10px;
}
```




```{r}
#| warning: false
#| echo: false

# Sample data for stock options
list_stocks <- params$alpha
pw<- params$weight

stock_data <- getQuote(list_stocks,what=yahooQF(c("Name","Open","P/E Ratio","Dividend/Share")))
names(stock_data)<-c("Trade_Time","Full_Name","Value","PE_Ratio","Dividend_Per_Share")
stock_data$Stock_Name<-row.names(stock_data)
stock_data$quantity<-params$weight


###estimate value of portfolio at last day
prices <- getSymbols(list_stocks, from = "2019-01-01", to = "2024-10-15",
                     auto.assign = TRUE)
price_pie<-prices %>% 
           map(~Ad(get(.))) %>% 
           reduce(merge)
values<-as.data.frame(last( price_pie)) * pw


###calulate rentability

pr_monthly <- to.monthly(price_pie, indexAt = "lastof", OHLC = FALSE)
rt_monthly <- na.omit(Return.calculate(pr_monthly, method = "log"))
rt_rebal_mo <- Return.portfolio(rt_monthly, weights = pw, 
                                rebalance_on = "months")

 ###Total value
pw <- params$weight
price_tmp <- params$weight[1]*Ad(get(params$alpha[1]))
names(price_tmp) <- "Total"
for (s in 2:length( params$alpha)) {
  price_tmp<- price_tmp + params$weight[s]*Ad(get(params$alpha[s]))
}


## GET NUMBERS FOR widget
## 6 month ,1 year and 5 years performance
to_plot<-as.data.frame(price_tmp)
to_plot$date<-index(price_tmp)



pr_1month<-to.period(price_tmp, period = "months",k=1)
rt_1month <- na.omit(Return.calculate(pr_1month, method = "discrete"))
p1m<-as.numeric(last(rt_1month$`price_tmp.Close`))

pr_6month<-to.period(price_tmp, period = "months",k=6)
rt_6month <- na.omit(Return.calculate(pr_6month, method = "discrete"))
p6m<-as.numeric(last(rt_6month$`price_tmp.Close`))


pr_12month<-to.period(price_tmp, period = "months",k=12)
rt_12month <- na.omit(Return.calculate(pr_12month, method = "discrete"))
p12m<-as.numeric(last(rt_12month$`price_tmp.Close`))

pr_60month<-to.period(price_tmp, period = "years",k=5)
rt_60month <- na.omit(Return.calculate(pr_60month, method = "discrete"))
p60m<-as.numeric(last(rt_60month$`price_tmp.Close`))

```



## Column {width="65%"}
 

```{r}
#| warning: false
#| echo: false


sparkline <- plot_ly(to_plot) %>%
  add_lines(
    x = ~date, y = ~Total,
    color = I("white"), span = I(1),
    fill = 'tozeroy', alpha = 0.2
  ) %>%
  layout(
    xaxis = list(visible = F, showgrid = F, title = ""),
    yaxis = list(visible = F, showgrid = F, title = ""),
    hovermode = "x",
    margin = list(t = 0, r = 0, l = 0, b = 0),
    font = list(color = "white"),
    paper_bgcolor = "transparent",
    plot_bgcolor = "transparent"
  ) %>%
  config(displayModeBar = F) %>%
  htmlwidgets::onRender(
    "function(el) {
      el.closest('.bslib-value-box')
        .addEventListener('bslib.card', function(ev) {
          Plotly.relayout(el, {'xaxis.visible': ev.detail.fullScreen});
        })
    }"
  )


vbs <- list(
  value_box(
    title = "Portfolio Value ($)",
    value = round(sum(values),0.01),
    showcase = bs_icon("wallet"),
    theme = "purple",
    
    p(paste0("Number of Positions: ",length(params$alpha))),
    p(paste0("Sharpe Ratio: ",round(SharpeRatio(rt_rebal_mo)[1,1],3)))
  ),

value_box(
  title = "Performance last month",
  value = paste0(round(p1m*100,1)," %"),
  p(paste0("last 6 month: ",round(p6m*100,1)," %")),
  p(paste0("last 1 year: ",round(p12m*100,1)," %")),
  p(paste0("last 5 years: ",round(p60m*100,1)," %")),
  showcase = sparkline,
  full_screen = TRUE,
  theme = "success"
)
)

layout_column_wrap(
  width = "175px",
  !!!vbs
)

```



```{r}
#| warning: false
#| echo: false

###reshape for reactable
df_sp <- NULL
for (s in list_stocks) {
  s_tmp <- as.data.frame(get(s ))
  getQuote(s,what=yahooQF(c("Name")))
  names(s_tmp) <- c( "open" , "high", "low", "close" ,"volume", "adj_close")
  s_tmp$date <- as.Date(row.names(s_tmp))
  s_tmp$stock_symbol <- s
  s_tmp2 <- s_tmp %>% select(stock_symbol, date, open, high, low, close, adj_close,volume)
  df_sp <- rbind(df_sp,s_tmp2)
}


#| warning: false
#| echo: false
#Create awesome table
#look at the most recent date of stock values per company
sp_last_date = df_sp|>
  group_by(stock_symbol)|>
  summarise(last_date = max(date))

#minimum value of last date among all companies
last_date = min(sp_last_date$last_date)

#get dates for 1m, 6m ago
date_1m = last_date %m-% months(1) 
date_6m = last_date %m-% months(6) 
date_1y = last_date %m-% months(12) 

#get last close value of stock per company
df_last_sp <- df_sp|>
  filter(date == last_date)|>
  select(stock_symbol, close)|>
  rename(last=close)

#aggregate by company list of stock prices past month
df_trend_1m <- df_sp|>
  filter(date <= last_date & date >= date_1m)|>
  arrange(stock_symbol, date)|>
  group_by(stock_symbol)|>
  summarise(trend_1m = list(close))

#aggregate by company list of stock prices past 6 months
df_trend_6m <- df_sp|>
  filter(date <= last_date & date >= date_6m)|>
  group_by(stock_symbol)|>
  summarise(trend_6m = list(close))

#aggregate by company list of stock prices past year
df_trend_1y <- df_sp|>
  filter(date <= last_date & date >= date_1y)|>
  group_by(stock_symbol)|>
  summarise(trend_1y = list(close))

#get the stock prices per company 1 month ago, 6 months ago, and 1 year ago
df_values <- df_sp|>
  filter(date %in% c(getdate("last bizday", date_1m, "Brazil/ANBIMA"), getdate("last bizday", date_6m, "Brazil/ANBIMA"), getdate("last bizday", date_1y, "Brazil/ANBIMA")))|>
  select(stock_symbol, date, close)|>
  mutate(close = round(close,2))|>
  pivot_wider(id_cols=stock_symbol, names_from = date, values_from = close)|>
  rename(value_1y = 2, value_6m = 3, value_1m = 4)


df_table<- df_last_sp|>
  #combine and merge all data sets - values & trends
  left_join(df_values, by="stock_symbol")|>
  left_join(df_trend_1m, by="stock_symbol")|>
  left_join(df_trend_6m, by="stock_symbol")|>
  left_join(df_trend_1y, by="stock_symbol")|>
  #add a color comp variable to change table fonts based on positive/negative values
  mutate(comp_1m = case_when(value_1m>last ~ "#F73131", TRUE ~ "#0BC157"),
         comp_6m = case_when(value_6m>last ~ "#F73131", TRUE ~ "#0BC157"),
         comp_1y = case_when(value_1y>last ~ "#F73131", TRUE ~ "#0BC157"),
         #create delta values
         delta_1m = (last - value_1m)/value_1m, 
         delta_6m = (last - value_6m)/value_6m,
         delta_1y = (last - value_1y)/value_1y
  )|>
  #rearrange order of variables before passing it into table
  select(stock_symbol, last, delta_1m, comp_1m, trend_1m, delta_6m, comp_6m, trend_6m, delta_1y, comp_1y, trend_1y)


font="Archivo"
#create table
reactable(data=df_table,
          fullWidth = FALSE,
          defaultPageSize=14,
          defaultColDef = colDef(vAlign="center", align="center", width=100),
          theme = reactableTheme(
            style=list(fontFamily=font)
          ),
          #create grouped columns (equivalent of table spanners in gt)
          columnGroups = list(
            colGroup(name="1M", columns = c("delta_1m", "trend_1m")),
            colGroup(name="6M", columns = c("delta_6m", "trend_6m")),
            colGroup(name="1Y", columns = c("delta_1y", "trend_1y"))
          ),
          #customize individual columns
          columns = list(
            #hid columns with color reference values
            comp_1y = colDef(show=FALSE),
            comp_1m = colDef(show=FALSE),
            comp_6m = colDef(show=FALSE),
            stock_symbol = colDef(name="COMPANY", 
                                  align="left",
                                  width = 280,
                                  #plug in html for stock symbols - add image, company name, and symbol value underneath
                                  cell = function(value){
                                    #create image variable
                                   
                                    company_name =     getQuote(value,what=yahooQF(c("Name")))$Name
                                    
                                   
                                    #use htmltools to create divs
                                    htmltools::tagList(
                                 
                                      div(style="display: inline-block;vertical-align:middle;",
                                          div(style = "vertical-align:middle;font-weight:bold;", company_name),
                                          div(style = "vertical-align:middle;font-size:8pt;color:#8C8C8C;padding-top:5px;", paste0("SYMBL: ",value))
                                      )
                                    )
                                  }),
            last = colDef(name = "VALUE",
                          width=120,
                          #format last value with html to align $ symbol on left and USD value on right
                          cell = function(value){
                            price = format(value, nsmall = 2)
                            tagList(
                              span("$", style="text-align:left;display:inline-block;width:4px;font-weight:bold;"),
                              span(price, style="text-align:right;display:inline-block;width:70px;padding-left:5px;font-weight:bold;")
                            )
                          }),
            delta_1m = colDef(name="DELTA",
                              #use cell_style to add left sided border
                              style = cell_style(
                                border_color = "#f2f2f2",
                                border_style = "solid",
                                border_width = "1px 0px 0px 2px",
                                vertical_align = "center"
                              ),
                              #use custom function to create html for deltas (arrow direction, colors, etc)
                              cell = function(value, index){
                                color = df_table$comp_1m[index]
                                perc = paste0(abs(round(value*100,1)),"%")
                                bg = ifelse(value<0,"#FCE8E4","#DBFFEA")
                                icon = ifelse(value<0,"arrow-down","arrow-up")
                                tagList(
                                  span(shiny::icon(icon), style=glue("text-align:left;display:inline-block;width:4px;color:{color}")),
                                  span(perc, style=glue("text-align:right;display:inline-block;width:60px;color:black;"))
                                )
                              }),
            delta_6m = colDef(name="DELTA",
                              style = cell_style(
                                border_color = "#f2f2f2",
                                border_style = "solid",
                                border_width = "1px 0px 0px 2px",
                                vertical_align = "center"
                              ),
                              cell = function(value, index){
                                color = df_table$comp_6m[index]
                                perc = paste0(abs(round(value*100,1)),"%")
                                bg = ifelse(value<0,"#FCE8E4","#DBFFEA")
                                icon = ifelse(value<0,"arrow-down","arrow-up")
                                tagList(
                                  span(shiny::icon(icon), style=glue("text-align:left;display:inline-block;width:4px;color:{color}")),
                                  span(perc, style=glue("text-align:right;display:inline-block;width:60px;color:black;"))
                                )
                              }),
            delta_1y = colDef(name="DELTA",
                              style = cell_style(
                                border_color = "#f2f2f2",
                                border_style = "solid",
                                border_width = "1px 0px 0px 2px",
                                vertical_align = "center"
                              ),
                              cell = function(value, index){
                                color = df_table$comp_1y[index]
                                perc = paste0(abs(round(value*100,1)),"%")
                                bg = ifelse(value<0,"#FCE8E4","#DBFFEA")
                                icon = ifelse(value<0,"arrow-down","arrow-up")
                                tagList(
                                  span(shiny::icon(icon), style=glue("text-align:left;display:inline-block;width:4px;color:{color}")),
                                  span(perc, style=glue("text-align:right;display:inline-block;width:60px;color:black;"))
                                )
                              }),
            trend_1m = colDef(name = "TREND", 
                              cell = react_sparkline(data = df_table,
                                                     line_curve = "linear",
                                                     show_area = TRUE,
                                                     line_color_ref = "comp_1m",
                                                     area_color_ref = "comp_1m")),
            trend_6m = colDef(name = "TREND", 
                              cell = react_sparkline(data = df_table,
                                                     line_curve = "linear",
                                                     show_area = TRUE,
                                                     line_color_ref = "comp_6m",
                                                     area_color_ref = "comp_6m")),
            trend_1y = colDef(name = "TREND", 
                              cell = react_sparkline(data = df_table,
                                                     line_curve = "linear",
                                                     show_area = TRUE,
                                                     line_color_ref = "comp_1y",
                                                     area_color_ref = "comp_1y"))
          )) %>%
  #use htmlwidgets to add title and subtitle with prependContent
  htmlwidgets::prependContent(
    tagList(
      h1("", style=glue('font-family:{font};margin-bottom:4px;font-size:35px;')),
      div("Stock prices evolution of portfolio.", style=glue('font-family:{font};padding-bottom:5px;color:#A2A2A2;font-size:17px;'))
    )
  ) 
```




 
## Column {width="35%"}



### Row {width="20%"}


```{r}
#| warning: false
#| echo: false

 
# Render the stock options as an attractive list with details
tags$ul(class = "stock-list",
        lapply(1:nrow(stock_data), function(i) {
          tags$li(class = "stock-item",
                  tags$div(class = "stock-header", stock_data$Stock_Name[i]),
                  tags$div(class = "stock-details",
                           tags$strong("Quantity: "),  stock_data$quantity[i], br(),
                           tags$strong("Full Name: "), stock_data$Full_Name[i], br(),
                           tags$strong("Value: "), 
                           tags$span(class = "stock-value", paste("$", format(stock_data$Value[i], nsmall = 2))), br(),
                           tags$strong("PE Ratio: "), stock_data$PE_Ratio[i], br(),
                           tags$strong("Dividend/Share: "), 
                           ifelse(is.na(stock_data$Dividend_Per_Share[i]), "N/A", paste("$", format(stock_data$Dividend_Per_Share[i], nsmall = 2)))
                  )
          )
        })

)
```

### Row {width="20%"}
 

```{r}
#| warning: false
#| echo: false


##Pie Chart 3D
categories<-list_stocks
#values<-values[-length(values)]
#categories<-categories[-length(categories)]
pct<-  round(values/sum(values) * 100,1) 
pct<-unname(unlist(pct[1,]))
new_labels = paste0(categories,": ",pct,"%")
 
pie3D(x=pct,labels= new_labels,col= rainbow(length(pct)),explode=0.1,labelcex=1,
            shade=0.7,edges=500)


```


### Row {width="60%"}




```{r}
#| warning: false
#| echo: false

#Let s give a ponderation and compare to S&P 500.
Indice<-Ad(VUSA.AS)
names(Indice)<-"SP500"
coef<-as.numeric(price_tmp[1,]/Indice[1,])
###The goal here is to simulate what would happen  if we have built a 1000$ portfolio and we look how it would have evolved

#The first date we see the value of the portfolio was:   370.7300 
#What would happend if we only bought an S&P 500 at that time . 
###25.547   370.73/25.547 =14.51 stocks 

plot.xts(cbind(price_tmp,coef*Indice),main = 'Portfolio vs. S&P500',legend.loc="topleft")


```

 
